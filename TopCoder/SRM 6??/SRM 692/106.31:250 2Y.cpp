// Paste me into the FileEdit configuration dialog

#include <bits/stdc++.h>
using namespace std;
#define AA first
#define BB second
#define OP begin()
#define ED end()
#define SZ size()
#define MP make_pair
#define PB push_back
#define cmax(x,y) x=max((x),(y))
#define cmin(x,y) x=min((x),(y))

typedef long long LL;
typedef pair<int,int> PII;

int G[55][55];
int DFN[55],Low[55],Index;
int ST[55],ist,inS[55],vis[55],scc[55],sccid;

void tarjan(int u,int p,int q,int n){
	DFN[u]=Low[u]=++Index;
	ST[ist++]=u;inS[u]=1;
	vis[u]=1;
	for(int i=0;i<n;i++)if(G[u][i]>=p&&G[u][i]<=q){
		if(!vis[i]){
			tarjan(i,p,q,n);
			cmin(Low[u],Low[i]);
		}else if(inS[i])
			cmin(Low[u],DFN[i]);
	}
	if(DFN[u]==Low[u]){
		sccid++;
		while(true){
			int v=ST[--ist];
			scc[v]=sccid;
			inS[v]=0;
			if(u==v)break;
		}
	}
}
bool can(int p,int q,int n){
	sccid=ist=Index=0;
	for(int i=0;i<n;i++)
		inS[i]=vis[i]=scc[i]=0;
	tarjan(0,p,q,n);
	set<int>S;
	for(int i=0;i<n;i++)S.insert(scc[i]);
	return S.SZ==1;
}
class HardProof {
public:
	int minimumCost( vector <int> D ) {
		int n=0;
		while(n*n<D.SZ)n++;
		int i,j,k;
		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
				G[i][j]=D[i*n+j];
		vector<int>Z(D.OP,D.ED);
		sort(Z.OP,Z.ED);
		Z.erase(unique(Z.OP,Z.ED),Z.ED);
		int ret=150000;
		for(j=0;j<Z.SZ;j++){
			int le=j,re=Z.SZ-1,ge=-1;
			while(re>=le){
				if(re-le<=1){
					if(can(Z[j],Z[le],n))ge=le;
					else if(can(Z[j],Z[re],n))ge=re;
					break;
				}
				int mid=(le+re)>>1;
				if(can(Z[j],Z[mid],n))re=mid;
				else le=mid;
			}
			if(~ge)cmin(ret,Z[ge]-Z[j]);
		}
		return ret;
	}
};

// BEGIN CUT HERE
namespace moj_harness {
	int run_test_case(int);
	void run_test(int casenum = -1, bool quiet = false) {
		if ( casenum != -1 ) {
			if ( run_test_case( casenum ) == -1 && !quiet )
				cerr << "Illegal input! Test case " << casenum << " does not exist." << endl;
			return;
		}
		
		int correct = 0, total = 0;
		for ( int i=0;; ++i ) {
			int x = run_test_case(i);
			if ( x == -1 ) {
				if ( i >= 100 ) break;
				continue;
			}
			correct += x;
			++total;
		}
		
		if ( total == 0 ) {
			cerr << "No test cases run." << endl;
		} else if ( correct < total ) {
			cerr << "Some cases FAILED (passed " << correct << " of " << total << ")." << endl;
		} else {
			cerr << "All " << total << " tests passed!" << endl;
		}
	}
	
	int verify_case(int casenum, const int &expected, const int &received, clock_t elapsed) { 
		cerr << "Example " << casenum << "... "; 
		
		string verdict;
		vector<string> info;
		char buf[100];
		
		if (elapsed > CLOCKS_PER_SEC / 200) {
			sprintf(buf, "time %.2fs", elapsed * (1.0/CLOCKS_PER_SEC));
			info.push_back(buf);
		}
		
		if ( expected == received ) {
			verdict = "PASSED";
		} else {
			verdict = "FAILED";
		}
		
		cerr << verdict;
		if (!info.empty()) {
			cerr << " (";
			for (int i=0; i<(int)info.size(); ++i) {
				if (i > 0) cerr << ", ";
				cerr << info[i];
			}
			cerr << ")";
		}
		cerr << endl;
		
		if (verdict == "FAILED") {
			cerr << "    Expected: " << expected << endl; 
			cerr << "    Received: " << received << endl; 
		}
		
		return verdict == "PASSED";
	}

	int run_test_case( int casenum ) {
		switch( casenum ) {
		case 0: {
			int D[]                   = {0,11,13,13, 10,0,12,13, 10,10,0,11, 12,10,10,0};
			int expected__            = 1;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}
		case 1: {
			int D[]                   = {0,1000,1000,1000,1000, 1,0,1000,1000,1000, 1,1,0,1000,1000, 1,1,1,0,1000, 1,1,1,1,0};
			int expected__            = 999;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}
		case 2: {
			int D[]                   = {0,95,1,10, 95,0,76,33, 1,76,0,49, 10,33,49,0};
			int expected__            = 32;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}
		case 3: {
			int D[]                   = {0,136946,89305,28946, 40152,0,150000,85407, 122920,110420,0,32811, 2092,79717,53028,0} ;
			int expected__            = 50771;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}
		case 4: {
			int D[]                   = {0,2159,2234,2720,2029,2853,2187, 2564,0,2409,2519,2441,2665,2654, 2666,2575,0,2215,2978,2588,2582, 2067,2743,2156,0,2840,2970,2480, 2724,2057,2136,2044,0,2030,2424, 2860,2512,2026,2867,2594,0,2401, 2893,2194,2802,2892,2151,2554,0} ;
			int expected__            = 206;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}
		case 5: {
			int D[]                   = {0,44,47,42,44,45,47,42,47,43,46,46,42,47,47,45,44,46,43,47,44,43,43,47,47,44,46,47,44,44,46,43,44,42,42,44,43,43,46,44,45,44,43,43,42,47,47,45,45,42, 44,0,44,43,43,46,44,47,43,46,44,42,42,46,44,44,45,44,43,46,46,46,47,47,44,47,42,44,45,44,42,42,43,46,46,44,43,44,42,45,44,45,44,45,46,44,42,47,43,43, 42,46,0,42,44,43,42,42,43,46,45,45,45,45,46,46,47,46,42,42,43,45,44,43,45,47,47,47,45,47,46,44,43,46,42,47,42,47,43,43,47,45,44,42,44,44,47,47,42,45, 45,43,47,0,47,42,43,47,47,45,43,43,46,46,43,43,43,45,42,45,42,45,47,45,42,47,45,44,42,44,42,43,45,45,42,47,45,42,45,47,43,44,42,42,45,47,44,42,47,45, 43,43,46,47,0,44,47,42,45,45,46,46,42,45,43,47,42,45,42,47,44,43,43,45,47,46,47,44,43,42,42,47,44,42,45,47,44,44,44,47,43,42,46,47,46,47,44,43,45,45, 42,43,44,45,43,0,43,43,43,44,42,47,42,44,47,45,46,43,47,46,47,43,44,45,43,47,44,44,46,43,43,43,44,43,43,46,47,47,43,44,44,44,44,47,43,43,43,47,45,47, 46,45,46,43,47,42,0,43,42,46,42,42,42,44,47,46,46,43,46,44,42,45,45,46,47,47,47,47,42,47,46,45,42,47,45,45,44,44,47,42,47,43,43,44,47,46,47,44,43,45, 46,43,45,47,44,47,45,0,44,43,45,47,44,45,44,47,45,42,47,46,44,46,44,44,45,45,43,47,44,44,45,45,42,42,42,42,45,46,42,43,43,42,44,45,47,46,47,47,45,42, 46,46,47,44,43,46,44,42,0,43,44,45,43,46,43,42,45,43,43,42,46,47,43,44,44,42,44,47,45,46,42,45,43,45,44,42,45,45,42,43,46,47,43,46,47,46,43,47,46,45, 43,46,45,44,43,45,42,42,46,0,44,47,43,42,46,42,45,45,46,45,47,44,45,44,46,47,45,43,45,46,46,45,47,44,46,42,44,46,44,44,46,43,42,45,42,43,42,45,44,44, 42,45,46,42,46,42,42,45,44,47,0,45,43,44,44,46,43,42,42,42,45,47,44,44,44,47,44,43,43,47,42,45,47,42,45,45,43,42,45,42,47,44,44,44,44,45,42,45,43,42, 47,47,46,43,44,45,45,42,42,43,44,0,43,43,43,46,42,43,42,43,43,46,47,47,42,43,46,47,43,42,43,42,45,45,42,47,45,42,42,44,46,44,43,42,47,47,46,47,47,46, 42,43,42,43,43,46,43,47,47,44,44,45,0,47,44,42,44,44,42,46,44,44,46,42,46,47,43,45,46,42,43,46,43,45,42,47,47,47,45,47,47,45,47,45,42,47,43,42,45,44, 43,47,47,46,46,43,42,45,47,47,44,44,47,0,44,45,47,45,44,43,46,43,42,43,44,43,42,43,47,42,42,47,44,46,44,47,44,47,47,42,42,42,45,46,45,47,45,44,43,47, 43,47,47,42,44,42,45,43,44,47,43,42,46,42,0,43,46,44,42,43,47,45,47,46,46,42,47,42,42,44,44,47,42,43,44,42,42,44,43,45,46,45,42,45,43,47,47,46,45,47, 42,42,43,47,46,46,43,42,46,43,43,43,42,45,47,0,42,43,46,47,46,46,44,42,47,46,42,46,44,45,47,46,45,45,42,44,43,46,42,45,45,45,42,47,42,47,42,46,44,44, 42,44,45,46,42,45,44,45,47,43,44,45,44,45,46,42,0,43,44,44,46,45,45,43,42,43,47,46,46,43,46,47,46,45,43,47,44,42,42,47,45,46,46,47,43,42,44,43,47,47, 45,42,45,46,43,43,42,46,44,46,47,46,47,44,46,42,43,0,44,44,47,45,45,42,43,42,44,46,43,45,45,43,46,47,45,45,46,43,44,47,45,47,45,46,45,47,46,43,45,47, 42,45,47,47,46,42,42,43,43,47,46,42,43,47,46,43,42,45,0,42,45,46,42,47,43,47,42,47,44,44,42,44,45,44,46,44,43,46,42,47,46,43,44,47,42,42,44,47,42,45, 47,42,45,42,44,47,44,44,43,46,45,46,46,42,45,45,42,42,43,0,45,43,44,42,47,43,43,45,47,42,42,43,46,42,44,47,47,46,44,43,47,43,43,46,47,47,45,45,45,46, 42,42,46,46,45,44,42,43,43,45,44,44,46,42,44,46,47,42,43,45,0,43,42,42,46,46,42,45,45,45,44,46,45,43,43,47,42,47,47,43,44,43,44,44,46,45,44,43,43,46, 44,44,47,42,46,42,45,47,46,44,43,42,42,44,46,47,46,45,42,47,46,0,43,43,47,42,44,44,42,44,45,45,46,44,46,44,47,46,44,46,46,47,45,42,45,44,43,42,42,42, 43,42,44,44,42,44,44,42,47,42,47,47,47,45,45,43,43,45,47,47,46,42,0,42,45,42,47,42,44,43,46,46,42,46,43,43,45,43,46,47,44,42,47,45,43,46,46,47,44,45, 44,46,44,43,44,47,46,42,47,47,47,46,43,47,42,47,42,44,44,42,47,46,44,0,44,45,44,42,43,43,42,43,42,46,45,43,44,42,46,43,46,47,43,45,44,46,45,42,42,42, 47,46,44,44,42,47,43,47,47,46,42,45,44,43,44,43,45,42,43,43,42,42,45,46,0,46,43,45,43,47,44,42,47,43,42,43,46,45,45,43,43,42,45,45,44,45,42,42,45,45, 43,44,47,46,43,43,44,42,44,46,45,45,42,42,44,46,47,44,47,44,46,44,47,47,43,0,43,42,45,42,45,45,44,44,45,46,45,47,45,45,47,47,46,47,46,45,45,43,45,44, 46,42,46,42,44,44,45,45,44,44,46,45,43,43,47,43,44,44,43,46,46,43,47,47,45,44,0,44,42,43,47,42,42,47,44,43,45,47,44,43,44,47,43,45,47,42,43,45,46,42, 44,47,43,43,45,44,46,42,47,45,46,45,45,42,45,42,44,45,45,47,47,42,47,46,44,42,42,0,44,43,47,47,47,42,44,45,44,42,44,44,47,46,42,45,46,47,42,43,44,43, 42,43,42,44,45,45,47,42,42,45,43,47,45,46,46,44,42,46,43,42,47,42,43,47,47,44,45,42,0,42,43,46,46,44,44,45,42,45,43,45,44,42,45,43,44,45,47,47,44,45, 47,42,42,46,44,44,46,44,42,47,45,44,43,45,42,44,46,43,44,42,43,42,46,43,44,45,46,47,42,0,45,43,45,43,44,45,46,47,46,45,47,43,44,42,42,46,47,42,43,44, 44,44,45,46,47,42,42,45,44,42,44,47,47,44,45,45,45,43,46,42,45,47,43,43,42,44,43,47,47,42,0,47,43,45,45,44,46,43,42,42,44,42,45,43,46,43,42,47,43,42, 42,45,43,47,45,46,46,42,43,44,42,47,44,47,45,44,44,45,42,46,47,45,44,46,42,47,42,46,45,42,46,0,44,44,43,45,44,44,44,44,43,44,42,42,44,47,47,45,45,42, 43,43,43,46,44,43,43,46,45,45,44,43,42,45,47,42,45,45,46,42,44,42,46,47,43,44,42,44,42,46,43,47,0,42,42,42,45,47,46,45,43,46,45,45,46,47,45,44,45,46, 43,47,45,42,46,47,43,46,44,45,45,42,44,47,44,44,46,47,46,46,42,46,43,45,43,45,46,42,46,42,47,46,42,0,43,47,43,42,43,44,47,44,45,42,46,46,47,43,46,43, 42,42,44,45,43,45,45,47,47,45,45,43,42,45,42,45,45,43,43,43,46,42,44,47,43,43,42,43,46,42,47,46,47,43,0,44,45,46,42,47,45,44,46,45,46,44,47,46,42,44, 43,44,45,45,47,44,44,45,42,45,45,47,46,47,43,46,45,47,44,47,42,44,44,42,45,42,42,43,47,43,42,47,43,47,42,0,43,42,46,46,43,46,45,46,44,45,42,42,47,46, 45,47,42,45,45,42,42,44,42,44,42,42,47,47,43,46,47,47,42,43,42,44,42,46,45,44,47,43,45,42,44,44,47,43,43,46,0,45,46,42,43,47,46,44,45,43,47,42,43,46, 45,45,44,43,43,45,45,42,42,43,44,47,46,44,42,47,46,45,42,44,43,45,44,46,46,44,47,42,47,44,45,47,47,47,46,42,47,0,46,46,44,44,46,45,47,45,45,44,45,44, 47,42,45,46,43,47,42,43,47,42,42,42,46,42,44,42,42,46,45,43,44,46,47,47,43,47,45,44,45,42,46,47,44,44,43,47,42,42,0,46,46,45,47,42,45,46,44,43,44,42, 46,42,46,44,44,44,44,46,42,44,44,45,42,44,47,45,44,47,44,42,46,43,45,45,45,43,46,44,44,47,43,42,46,45,47,43,42,46,45,0,43,45,43,42,43,45,43,47,47,42, 43,44,46,43,45,42,42,43,43,45,42,46,42,47,45,44,43,42,47,44,42,42,42,44,42,42,46,44,45,42,47,42,42,44,42,46,47,42,44,44,0,45,44,43,45,44,42,47,43,47, 45,43,45,45,42,47,42,46,43,45,43,46,43,42,47,45,45,44,47,47,47,43,44,42,47,47,44,45,44,42,43,47,47,45,46,46,43,45,47,44,45,0,47,47,45,42,45,47,42,42, 46,42,45,45,47,46,47,46,45,43,43,43,46,45,46,46,47,44,45,44,46,47,45,42,45,45,45,42,44,43,45,42,47,47,46,44,43,45,46,45,44,43,0,44,45,46,47,45,46,43, 44,43,43,42,47,45,46,46,43,42,43,45,42,42,42,42,45,46,47,47,45,46,45,43,47,47,45,47,45,42,46,45,46,45,45,44,47,47,45,44,44,47,42,0,44,47,47,43,47,42, 46,46,45,47,42,42,47,42,47,45,44,47,46,46,45,43,44,42,44,43,43,47,43,43,47,44,42,42,46,42,46,44,47,47,45,45,44,42,45,47,44,45,46,43,0,44,45,45,46,47, 46,46,44,42,42,44,46,45,45,46,44,43,46,45,43,47,47,47,42,42,42,42,45,44,45,45,42,45,44,42,46,43,43,43,44,42,43,43,45,43,47,47,43,43,45,0,43,44,44,46, 43,43,42,42,45,47,42,46,44,45,45,45,45,42,44,45,42,43,45,43,43,43,47,43,44,45,47,43,47,45,43,43,45,42,46,47,43,47,44,43,43,42,42,42,43,45,0,44,42,42, 47,43,46,42,45,43,47,44,47,45,44,45,43,42,42,46,46,44,46,42,46,43,44,43,42,42,47,45,47,46,45,42,42,47,45,45,46,47,43,43,44,44,42,43,43,42,47,0,42,43, 45,45,46,47,42,47,46,46,43,44,46,47,43,46,46,42,47,45,42,45,47,42,42,45,47,43,42,43,43,42,45,47,45,43,43,45,43,43,47,42,46,43,45,46,47,45,47,46,0,45, 46,46,42,47,47,47,42,44,43,46,43,47,43,43,46,45,42,45,47,42,47,42,44,42,43,47,43,45,42,44,45,46,43,46,46,44,46,43,42,44,45,42,42,47,43,47,45,46,42,0};
			int expected__            = 0;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}

		// custom cases

      case 6: {
			int D[]                   = {0, 44583, 15348, 99946, 127427, 3793, 49953, 109534, 81309, 24861, 136417, 60625, 62566, 117383, 90116, 146700, 141358, 67271, 122181, 101836, 106371, 45423, 38351, 116952, 146043, 52620, 30016, 116662, 129886, 84009, 10689, 43574, 24707, 128419, 21934, 138459, 120261, 104853, 57547, 26116, 144957, 143583, 29699, 15206, 43443, 28176, 68402, 0, 145137, 96644, 134006, 149421, 24588, 79846, 1410, 68987, 121038, 28424, 81816, 88788, 82055, 84937, 27166, 112498, 5412, 16652, 82377, 86148, 27827, 136117, 113306, 110107, 18008, 93375, 111840, 80720, 146247, 75856, 35620, 7598, 107517, 4259, 23165, 58676, 128231, 43404, 1199, 146010, 21604, 110900, 80303, 30998, 51444, 129634, 0, 116862, 32688, 110004, 93853, 31390, 125717, 65325, 90288, 67186, 62725, 110869, 32411, 61274, 82648, 87400, 135047, 61437, 137928, 32216, 67405, 48153, 5132, 67710, 78750, 32816, 131189, 139947, 68892, 61186, 127684, 52463, 78216, 133068, 102620, 114827, 59200, 94585, 35727, 110728, 82316, 32020, 98457, 104101, 49294, 137780, 90679, 0, 99129, 27820, 89947, 143011, 72734, 134788, 48183, 18106, 41573, 43050, 6146, 22886, 53232, 123530, 64349, 9555, 603, 14144, 126300, 87995, 67633, 142428, 51297, 19730, 36911, 47822, 125677, 32201, 67528, 25503, 141051, 10158, 82121, 29818, 117936, 24435, 97943, 101007, 19537, 124904, 82246, 76164, 47393, 56005, 107716, 69940, 0, 16783, 121957, 87399, 79854, 71305, 33965, 41922, 1341, 80887, 52803, 74208, 16273, 64114, 67586, 94826, 18927, 20749, 70620, 94075, 106925, 89905, 71872, 1658, 57589, 118040, 134045, 95750, 138801, 103371, 21387, 89765, 93770, 85119, 107821, 71939, 43172, 80450, 113361, 118155, 124270, 96308, 76435, 29355, 122029, 136703, 118830, 0, 142735, 119466, 102868, 53506, 122759, 125759, 4709, 101364, 87137, 122766, 75568, 73830, 34529, 75002, 103584, 103887, 89047, 39154, 33553, 73143, 48148, 44996, 94293, 21557, 23413, 18996, 85035, 73212, 123917, 100456, 100855, 46885, 67537, 77954, 27149, 81846, 111167, 117683, 8571, 131711, 113839, 50114, 124708, 49197, 140456, 98943, 0, 96953, 48314, 110389, 115834, 28698, 141813, 108848, 134270, 11376, 67742, 125950, 30731, 65373, 107367, 21885, 36329, 40147, 89183, 18901, 26388, 40656, 31855, 8140, 69774, 27791, 107072, 128913, 89944, 124928, 100793, 100480, 15369, 110443, 65650, 78635, 66547, 13138, 55530, 99058, 90002, 46885, 63799, 33083, 22236, 32660, 121618, 0, 127096, 111202, 133206, 136855, 122688, 149689, 129152, 8680, 134560, 102057, 34912, 140061, 59334, 70027, 40201, 61698, 133476, 77808, 46810, 8982, 103476, 75670, 131177, 146028, 16759, 46558, 66425, 62740, 39435, 65072, 18291, 50806, 96072, 82391, 17856, 75686, 22975, 112627, 20144, 55947, 120609, 125188, 57622, 135256, 93539, 126066, 0, 100681, 70424, 59304, 45099, 58141, 137334, 96719, 64185, 143864, 113801, 23934, 120275, 91885, 59711, 40432, 99767, 21354, 106001, 138766, 135101, 144388, 29509, 8674, 73267, 72515, 98149, 58517, 139336, 143835, 144287, 101814, 144005, 23591, 93471, 95277, 70150, 86003, 9804, 135622, 20663, 66157, 109705, 22413, 58172, 84793, 116442, 0, 107620, 53712, 23618, 118659, 5835, 34670, 106776, 53833, 1229, 22262, 126674, 56514, 58669, 116797, 78644, 19849, 129111, 33083, 92781, 7237, 81244, 5546, 57788, 149000, 133721, 54174, 109523, 5588, 136488, 85515, 48396, 62482, 100258, 42103, 59093, 67977, 51453, 131777, 54818, 137831, 120091, 75108, 126784, 60438, 47017, 17228, 0, 6581, 116105, 97677, 137802, 91075, 125138, 76830, 126925, 75222, 82068, 119636, 139498, 117163, 8174, 23417, 136741, 52428, 90370, 60655, 10280, 36728, 48275, 38678, 87134, 80646, 135467, 107130, 99751, 72263, 37663, 124353, 147611, 33904, 2777, 49243, 98996, 108521, 107986, 28339, 144794, 32883, 69533, 117069, 51739, 34452, 45164, 0, 135382, 133126, 8260, 24535, 101328, 50245, 82166, 88535, 139827, 10086, 124189, 67204, 86818, 52230, 70996, 4527, 148633, 94926, 20925, 47233, 10131, 110012, 61930, 109005, 69969, 92939, 88216, 135999, 29545, 114390, 91915, 4217, 40272, 126614, 71274, 79744, 78020, 50005, 124279, 145740, 57567, 51642, 78417, 3221, 139530, 46230, 0, 100453, 121429, 7338, 28013, 93733, 23783, 103932, 72540, 53811, 54870, 139015, 85765, 121545, 30651, 125021, 33210, 86901, 103017, 119691, 379, 88433, 16488, 128423, 77084, 74436, 82425, 90812, 69314, 139421, 50870, 90472, 89590, 24679, 74798, 50294, 247, 149102, 87926, 73085, 90647, 118826, 115872, 28223, 1115, 81856, 28965, 0, 19160, 115369, 51257, 124199, 63351, 124430, 111064, 55804, 114287, 77636, 35457, 13448, 13030, 58289, 77547, 83859, 52600, 74594, 73192, 25844, 30142, 134313, 51067, 65723, 62413, 8023, 20219, 9496, 37623, 32734, 98488, 10416, 87612, 28891, 141328, 38564, 73884, 61480, 149381, 80193, 109388, 139579, 31635, 54989, 120584, 86211, 0, 41150, 117079, 89817, 136948, 69035, 66609, 39173, 4931, 131529, 44152, 116537, 29842, 119310, 142216, 107214, 786, 78349, 17119, 79222, 147526, 23424, 105673, 17443, 87750, 136335, 90319, 76537, 125193, 108610, 134640, 109925, 146, 96062, 50357, 69891, 35972, 73968, 94397, 89987, 87327, 81405, 114098, 109246, 119418, 91513, 103765, 0, 101327, 23859, 23210, 140489, 50040, 11958, 26028, 64435, 44438, 56521, 36985, 75614, 69556, 55920, 89237, 70293, 71239, 29166, 54084, 138949, 89011, 88248, 2049, 139605, 88506, 91878, 48733, 52654, 85197, 98647, 83265, 74364, 62401, 127623, 64226, 23654, 15987, 136890, 52330, 73478, 76513, 102104, 125423, 120501, 60278, 82848, 0, 96778, 89911, 15127, 12029, 98976, 131451, 112709, 124853, 86672, 92508, 91477, 75227, 28831, 102335, 73929, 47889, 106148, 88151, 129623, 4172, 101643, 88591, 66120, 27433, 6105, 149142, 126299, 89974, 120120, 44895, 149046, 19595, 58043, 79820, 57287, 24528, 110849, 60967, 76019, 25394, 107987, 66386, 141727, 43243, 50385, 63834, 0, 107381, 49821, 125981, 138371, 88182, 122916, 6669, 101026, 128628, 95153, 102101, 43800, 110154, 45567, 18750, 58000, 9277, 123831, 61564, 146232, 123505, 41754, 89083, 38580, 147851, 121710, 145384, 110284, 146334, 92445, 134946, 65176, 120385, 99202, 137726, 60679, 13842, 20390, 75760, 17055, 109657, 79516, 51729, 102842, 45287, 126961, 0, 114446, 13496, 67958, 64500, 47362, 105442, 117906, 141361, 136215, 89942, 40136, 49970, 61516, 149466, 121147, 149237, 122560, 68896, 80747, 9465, 45307, 21079, 110655, 120831, 50593, 46796, 118053, 105136, 92562, 16534, 88398, 107068, 128072, 45990, 143792, 144076, 67289, 139601, 115710, 104177, 113358, 2684, 54631, 59132, 52224, 59087, 0, 41611, 140973, 28003, 126961, 44955, 123281, 25054, 27819, 85838, 47110, 137002, 76215, 3757, 78220, 10026, 106783, 93360, 113599, 146333, 39453, 108309, 20618, 43057, 89843, 3908, 21284, 97083, 88871, 137577, 49643, 142801, 15277, 116018, 85231, 65090, 123239, 132793, 118713, 84058, 44221, 135608, 61189, 130622, 104771, 29931, 66980, 0, 26050, 59091, 54301, 123200, 88442, 74588, 99919, 15374, 38671, 45694, 5282, 59279, 40210, 27606, 22722, 70421, 127613, 110010, 99286, 19865, 45974, 6705, 92200, 91229, 3802, 34958, 129135, 107641, 107992, 4788, 58352, 34240, 86963, 72842, 19147, 108573, 145152, 100027, 40650, 7608, 61933, 148754, 9356, 23030, 87299, 138771, 0, 119390, 145737, 124897, 134986, 129245, 132522, 16484, 38721, 148453, 64444, 48301, 79616, 74879, 9873, 78160, 115879, 147428, 102157, 149863, 27351, 55537, 113525, 123337, 69684, 132090, 22879, 135207, 61229, 140339, 27757, 44985, 80259, 46392, 12384, 39042, 93940, 34105, 146104, 85810, 75268, 149488, 70121, 79076, 57463, 107664, 101150, 0, 136108, 125154, 109252, 58973, 114944, 118203, 110997, 69472, 143415, 129239, 90900, 142865, 103549, 94735, 49078, 43151, 96497, 124465, 49321, 38645, 94197, 16494, 95257, 140556, 142834, 141686, 145829, 109114, 82964, 16433, 91237, 140183, 92994, 80309, 11303, 5609, 69896, 93524, 67836, 31572, 115551, 119994, 130287, 60150, 5421, 101068, 0, 16317, 142430, 133961, 108054, 33016, 53080, 27153, 55408, 122729, 73630, 22214, 132222, 120422, 35563, 143453, 122123, 45346, 46445, 72480, 118090, 58302, 146488, 128078, 20507, 86457, 2508, 43656, 79249, 17144, 35243, 49307, 50959, 87479, 127656, 31917, 119562, 87629, 89128, 149467, 1868, 38961, 130617, 40509, 19907, 119898, 99733, 0, 43415, 140296, 3761, 76071, 147124, 62164, 80994, 58926, 64172, 148334, 107057, 41628, 62554, 7311, 45621, 107516, 9321, 91018, 145874, 135361, 98200, 141275, 83101, 79699, 26353, 37964, 135690, 127485, 77113, 5781, 23736, 21393, 46701, 11204, 54685, 116609, 115643, 75499, 91282, 87333, 87218, 52206, 832, 100671, 79651, 115693, 0, 97109, 26311, 73365, 83212, 108980, 6678, 117693, 116896, 55632, 82796, 133220, 131976, 78658, 99106, 91363, 111999, 91969, 119528, 89968, 53531, 128969, 143382, 85878, 52752, 47324, 29095, 54972, 139175, 131885, 42474, 146775, 14324, 149058, 70295, 67340, 133309, 48819, 127282, 13674, 133358, 121888, 54170, 134824, 38558, 94876, 73067, 0, 54205, 71916, 7715, 100187, 67244, 32374, 60853, 79798, 50285, 94251, 43313, 136971, 4388, 88290, 148445, 34858, 136927, 64315, 24001, 16504, 56815, 53069, 11468, 68993, 1939, 82366, 41721, 123402, 16582, 106177, 118909, 120600, 89833, 105607, 88910, 135199, 125500, 107753, 67716, 54962, 59860, 51584, 8217, 100237, 21139, 149849, 0, 94940, 26338, 99701, 44517, 59762, 105950, 74443, 108845, 117125, 9045, 104969, 46820, 136214, 146474, 40605, 134892, 136302, 108010, 128386, 134825, 7531, 143253, 145545, 149405, 125176, 88479, 79700, 125860, 86047, 33406, 42581, 55921, 50894, 90032, 138499, 128729, 118146, 48358, 84690, 61468, 31939, 103911, 64539, 70053, 14089, 68798, 0, 114019, 81679, 22156, 113783, 112533, 119545, 61785, 3936, 5368, 110758, 96632, 44221, 64675, 120078, 57078, 112639, 123371, 53209, 30579, 1263, 60456, 126737, 53042, 50963, 56818, 114995, 11725, 56290, 141985, 28329, 10513, 141003, 32023, 86955, 36569, 136562, 15721, 87385, 24260, 24430, 125302, 139898, 34845, 143240, 104281, 106791, 0, 4710, 144535, 94982, 2143, 129719, 51637, 139448, 34634, 60896, 9179, 30062, 97898, 124822, 40158, 63614, 31924, 147512, 95060, 31289, 146162, 20955, 76947, 39701, 129941, 128406, 16014, 77714, 36384, 82633, 103377, 137254, 8049, 53563, 70333, 12593, 89564, 108128, 69215, 57469, 143823, 102526, 37978, 78770, 37490, 97187, 79403, 0, 84707, 60761, 115317, 117638, 87109, 2008, 129709, 92539, 109416, 76670, 36520, 20871, 48048, 45644, 39549, 4466, 58132, 50984, 131217, 40930, 7749, 139806, 63218, 61642, 1936, 83281, 85015, 72951, 44089, 2931, 29022, 80246, 99126, 81607, 110575, 49542, 32569, 99972, 112339, 77809, 140402, 22882, 110567, 126345, 72689, 115773, 0, 107811, 111612, 143326, 8499, 70475, 8020, 62854, 105777, 50973, 46566, 110723, 77364, 87581, 120507, 111703, 9364, 14141, 110016, 75557, 136722, 125677, 145584, 5726, 132159, 124145, 90272, 88610, 55167, 2703, 67169, 47637, 3669, 72537, 43711, 143494, 32898, 57594, 2536, 146094, 47008, 66333, 115981, 81226, 74930, 82317, 43827, 0, 34014, 122374, 64093, 131446, 111997, 116789, 116472, 47810, 72987, 125484, 10136, 31435, 47294, 20661, 138651, 100720, 61445, 131762, 42909, 147318, 112066, 37511, 52358, 12339, 83876, 26152, 86847, 107780, 130791, 14368, 41063, 31412, 96701, 61250, 124143, 45450, 57527, 116776, 39806, 136890, 138111, 109735, 126347, 27392, 139592, 103887, 0, 139362, 105225, 27329, 9827, 107675, 46768, 6302, 26748, 117308, 40877, 121525, 103495, 91757, 92988, 75395, 85765, 104453, 49292, 111334, 26148, 33275, 117700, 143224, 31890, 59634, 9107, 107873, 60589, 89975, 28946, 50876, 7640, 58127, 122106, 50109, 53635, 3302, 42997, 136436, 38377, 103833, 13001, 100265, 78071, 97354, 3375, 0, 83019, 137469, 136520, 1145, 42478, 77539, 767, 107243, 29596, 143841, 61092, 28781, 123502, 19086, 89893, 52404, 115766, 131225, 59392, 148535, 9359, 7401, 91081, 139551, 19964, 19159, 2743, 76279, 54459, 103594, 53628, 129514, 27001, 120600, 111906, 8495, 105275, 63237, 76831, 53121, 64783, 135388, 23708, 96122, 40883, 148335, 0, 132196, 142671, 32332, 89857, 17308, 99519, 146578, 49366, 116047, 89110, 37330, 138521, 124615, 92387, 90146, 20849, 107683, 83802, 101803, 61906, 39266, 53374, 110962, 18166, 1283, 60490, 39701, 107655, 78309, 89783, 40895, 144120, 126655, 113308, 61902, 106717, 77825, 89840, 5164, 15746, 56413, 54761, 96838, 125417, 94709, 130996, 0, 104132, 4242, 114861, 55095, 144407, 115371, 58387, 12641, 47251, 43504, 94386, 119826, 28031, 30975, 84105, 117082, 17259, 63062, 135572, 140612, 67453, 113107, 49912, 2330, 106609, 111582, 40057, 111320, 13647, 130378, 81028, 10497, 18530, 84238, 13270, 59908, 9485, 117167, 90525, 89303, 7615, 94731, 50685, 67897, 53073, 114091, 0, 137534, 97748, 27767, 134326, 84632, 65177, 117628, 146312, 139815, 21676, 18264, 135911, 96409, 110677, 84267, 30495, 119785, 18338, 2204, 83171, 44081, 148627, 56349, 51153, 58553, 43247, 129806, 102569, 50248, 83282, 70553, 111940, 41146, 10830, 4546, 67140, 65445, 16025, 115532, 32668, 136713, 10927, 59741, 129502, 47435, 137587, 0, 28518, 69673, 95086, 44167, 22409, 58953, 79916, 18587, 144793, 105197, 17191, 28441, 34080, 101634, 100471, 78692, 46948, 24552, 89790, 16612, 142125, 123793, 137877, 70043, 65225, 99692, 108049, 1807, 147613, 86846, 27572, 35990, 13190, 77366, 73183, 84860, 133930, 35768, 49908, 21084, 148700, 124505, 100578, 70203, 94651, 30863, 0, 37141, 133704, 121095, 134142, 75179, 61402, 29494, 92042, 47940, 104067, 35292, 11048, 123872, 19834, 27851, 101358, 115260, 145406, 26228, 103961, 48478, 132299, 144087, 112405, 125065, 77347, 138128, 148521, 50523, 19548, 111999, 138456, 121381, 140472, 84010, 107468, 106033, 133133, 74597, 13420, 10346, 60827, 33225, 65381, 132458, 37955, 0, 92094, 47149, 58032, 72581, 135136, 12579, 64773, 136774, 30126, 71089, 129712, 131034, 146616, 147841, 120789, 119034, 58697, 116609, 52013, 79021, 120885, 22787, 124981, 95219, 111707, 21653, 56607, 132916, 142832, 62433, 83278, 99845, 124645, 4203, 77118, 102868, 101327, 7703, 27689, 4652, 67023, 72821, 51102, 16211, 113002, 42051, 0, 67551, 22035, 140624, 43281, 143015, 1699, 52230, 141722, 113499, 13992, 138925, 58510, 19482, 37418, 140697, 52727, 37294, 4151, 13435, 24859, 129313, 66874, 1483, 64397, 7348, 25354, 26190, 80612, 32331, 64806, 5949, 116431, 3601, 34591, 65239, 33732, 7877, 38195, 100681, 47232, 90030, 86500, 5245, 113559, 78662, 58413, 0, 100287, 32958, 7741, 79148, 92580, 113014, 15018, 10590, 8259, 103249, 133629, 23205, 126982, 92290, 101369, 75574, 80233, 144909, 110954, 38356, 5361, 125590, 82578, 127288, 129045, 11199, 135026, 46055, 113275, 115100, 16093, 22263, 9120, 134850, 93089, 7586, 137546, 143424, 115042, 116328, 32225, 66896, 7779, 13925, 47115, 22929, 0, 59033, 134295, 114935, 107873, 119352, 64614, 81003, 25554, 91449, 81363, 66632, 78662, 32371, 50152, 38905, 122400, 36812, 91369, 73287, 123535, 18783, 121796, 67577, 125832, 93273, 38819, 42878, 85440, 52234, 117698, 111714, 37121, 89766, 100197, 115085, 146168, 44807, 141335, 38765, 47929, 138850, 36519, 83103, 17246, 90142, 94464, 0, 27681, 101657, 56859, 135036, 4332, 130735, 128136, 145214, 72846, 95280, 111627, 149316, 13416, 87974, 90895, 108668, 60366, 137623, 76036, 144693, 145706, 48687, 126686, 80432, 96766, 123178, 19901, 53428, 111360, 12256, 39133, 135811, 53308, 80148, 87456, 1756, 87395, 149103, 60424, 136935, 97616, 12424, 39395, 131559, 107225, 83542, 0};
			int expected__            = 9530;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}
/*      case 7: {
			int D[]                   = ;
			int expected__            = ;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}*/
/*      case 8: {
			int D[]                   = ;
			int expected__            = ;

			clock_t start__           = clock();
			int received__            = HardProof().minimumCost( vector <int>( D, D + ( sizeof D / sizeof D[0] ) ) );
			return verify_case( casenum, expected__, received__, clock()-start__ );
		}*/
		default:
			return -1;
		}
	}
}
 

int main(int argc, char *argv[]) {
	if (argc == 1) {
		moj_harness::run_test();
	} else {
		for (int i=1; i<argc; ++i)
			moj_harness::run_test(atoi(argv[i]));
	}
}
// END CUT HERE
